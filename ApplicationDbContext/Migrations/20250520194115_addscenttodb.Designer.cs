// <auto-generated />
using System;
using Fragrance.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fragrance.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250520194115_addscenttodb")]
    partial class addscenttodb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fragrance.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Fragrance.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("ParfumeId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ParfumeId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Fragrance.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("PaymentDueData")
                        .HasColumnType("date");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OrderHeader");
                });

            modelBuilder.Entity("Fragrance.Models.Parfume", b =>
                {
                    b.Property<int>("ParfumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParfumeId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseNotes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<string>("MiddleNotes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("ScentNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScentProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Size100")
                        .HasColumnType("int");

                    b.Property<int>("Size30")
                        .HasColumnType("int");

                    b.Property<int>("Size50")
                        .HasColumnType("int");

                    b.Property<string>("TopNotes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ParfumeId");

                    b.ToTable("Parfumes");

                    b.HasData(
                        new
                        {
                            ParfumeId = 1,
                            Author = "Jean Paul Gaultier",
                            BaseNotes = "Tonka Bean,Amber",
                            Gender = "Male",
                            ImgUrl = "",
                            ListPrice = 120.0,
                            MiddleNotes = "Vanilla,Benzoin",
                            Name = "Le Male Elixir",
                            Price = 100.0,
                            Price100 = 80.0,
                            Price50 = 90.0,
                            Quantity = 99,
                            Rating = 4.0999999999999996,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Cardamom,Lavender",
                            description = "A bold and intense fragrance."
                        },
                        new
                        {
                            ParfumeId = 2,
                            Author = "Parfume de Marly",
                            BaseNotes = "Vanilla,Cedarwood",
                            Gender = "Unisex",
                            ImgUrl = "",
                            ListPrice = 150.0,
                            MiddleNotes = "Tobacco,Incense",
                            Name = "Herod",
                            Price = 140.0,
                            Price100 = 120.0,
                            Price50 = 130.0,
                            Quantity = 99,
                            Rating = 4.7000000000000002,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Cinnamon,Pepper",
                            description = "A sweet and spicy fragrance with tobacco notes."
                        },
                        new
                        {
                            ParfumeId = 3,
                            Author = "Viktor Rolf",
                            BaseNotes = "Tobacco,Vanilla",
                            Gender = "Male",
                            ImgUrl = "",
                            ListPrice = 110.0,
                            MiddleNotes = "Cinnamon,Saffron",
                            Name = "Spicebomb Extreme",
                            Price = 100.0,
                            Price100 = 85.0,
                            Price50 = 90.0,
                            Quantity = 99,
                            Rating = 4.5,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Pepper,Grapefruit",
                            description = "A powerful and warm spicy scent."
                        },
                        new
                        {
                            ParfumeId = 4,
                            Author = "Maison Margiela",
                            BaseNotes = "Tobacco,Vanilla",
                            Gender = "Male",
                            ImgUrl = "",
                            ListPrice = 130.0,
                            MiddleNotes = "Rum,Clary Sage",
                            Name = "Jazz Club",
                            Price = 120.0,
                            Price100 = 100.0,
                            Price50 = 110.0,
                            Quantity = 99,
                            Rating = 4.9000000000000004,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Pink Pepper,Neroli",
                            description = "A warm and cozy fragrance with boozy notes."
                        },
                        new
                        {
                            ParfumeId = 5,
                            Author = "Armani",
                            BaseNotes = "Vanilla,Tonka Bean",
                            Gender = "Male",
                            ImgUrl = "",
                            ListPrice = 140.0,
                            MiddleNotes = "Lavender,Sage",
                            Name = "Stronger With You Intensely",
                            Price = 130.0,
                            Price100 = 110.0,
                            Price50 = 120.0,
                            Quantity = 99,
                            Rating = 4.7999999999999998,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Pink Pepper,Juniper",
                            description = "A sweet and gourmand fragrance."
                        },
                        new
                        {
                            ParfumeId = 6,
                            Author = "Azzaro",
                            BaseNotes = "Vanilla,Amber",
                            Gender = "Male",
                            ImgUrl = "",
                            ListPrice = 150.0,
                            MiddleNotes = "Wood Accord",
                            Name = "The Most Wanted Parfum",
                            Price = 140.0,
                            Price100 = 120.0,
                            Price50 = 130.0,
                            Quantity = 99,
                            Rating = 4.2000000000000002,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Ginger,Bergamot",
                            description = "A warm, woody fragrance with an intense character."
                        },
                        new
                        {
                            ParfumeId = 7,
                            Author = "Tom Ford",
                            BaseNotes = "Dried Fruits,Wood",
                            Gender = "Unisex",
                            ImgUrl = "",
                            ListPrice = 200.0,
                            MiddleNotes = "Vanilla,Cacao",
                            Name = "Tobacco Vanille",
                            Price = 190.0,
                            Price100 = 170.0,
                            Price50 = 180.0,
                            Quantity = 99,
                            Rating = 4.2999999999999998,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Tobacco Leaf,Spices",
                            description = "A luxurious blend of tobacco and vanilla."
                        },
                        new
                        {
                            ParfumeId = 8,
                            Author = "Tom Ford",
                            BaseNotes = "Amber,Moss",
                            Gender = "Unisex",
                            ImgUrl = "",
                            ListPrice = 160.0,
                            MiddleNotes = "Leather,Jasmine Sambac",
                            Name = "Ombre Leather",
                            Price = 150.0,
                            Price100 = 130.0,
                            Price50 = 140.0,
                            Quantity = 99,
                            Rating = 4.0,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Cardamom",
                            description = "A leather fragrance with a bold, smoky feel."
                        },
                        new
                        {
                            ParfumeId = 9,
                            Author = "Yves Saint Laurent",
                            BaseNotes = "Vetiver,Cedar",
                            Gender = "Male",
                            ImgUrl = "",
                            ListPrice = 110.0,
                            MiddleNotes = "Lavender,Bergamot",
                            Name = "La Nuit de L'Homme",
                            Price = 100.0,
                            Price100 = 90.0,
                            Price50 = 95.0,
                            Quantity = 99,
                            Rating = 4.2999999999999998,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Cardamom",
                            description = "A seductive fragrance with a blend of spices and woods."
                        },
                        new
                        {
                            ParfumeId = 10,
                            Author = "Chanel",
                            BaseNotes = "Sandalwood,Cedar",
                            Gender = "Male",
                            ImgUrl = "",
                            ListPrice = 180.0,
                            MiddleNotes = "Ginger,Nutmeg",
                            Name = "Bleu de Chanel",
                            Price = 170.0,
                            Price100 = 150.0,
                            Price50 = 160.0,
                            Quantity = 99,
                            Rating = 4.5,
                            ScentNotes = "Ginger,Vanilla,Amber",
                            ScentProfile = "Spicy,Woody",
                            Size = 0,
                            Size100 = 100,
                            Size30 = 30,
                            Size50 = 50,
                            TopNotes = "Grapefruit,Lemon",
                            description = "A fresh, woody fragrance that embodies freedom."
                        });
                });

            modelBuilder.Entity("Fragrance.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ParfumeId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ParfumeId");

                    b.ToTable("ShopingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fragrance.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Fragrance.Models.OrderDetail", b =>
                {
                    b.HasOne("Fragrance.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fragrance.Models.Parfume", "Parfume")
                        .WithMany()
                        .HasForeignKey("ParfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Parfume");
                });

            modelBuilder.Entity("Fragrance.Models.OrderHeader", b =>
                {
                    b.HasOne("Fragrance.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Fragrance.Models.ShoppingCart", b =>
                {
                    b.HasOne("Fragrance.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fragrance.Models.Parfume", "Parfume")
                        .WithMany()
                        .HasForeignKey("ParfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Parfume");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fragrance.Models.ApplicationUser", b =>
                {
                    b.HasOne("Fragrance.Models.Company", "company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("company");
                });
#pragma warning restore 612, 618
        }
    }
}
